version: '2.4'

services:

  elk-volumes-provisioner:
    image: hasnat/volumes-provisioner
    container_name: elk-volumes-provisioner
    environment:
      PROVISION_DIRECTORIES: "\
1000:1000:0755:/usr/share/elasticsearch/data;\
1000:1000:0755:/usr/share/logstash/data/dead_letter_queue
"
    volumes:
      - "${CONTAINERS_SHARED_DIR}/elasticsearch/data:/usr/share/elasticsearch/data"
      - "${CONTAINERS_SHARED_DIR}/logstash/data/dead_letter_queue:/usr/share/logstash/data/dead_letter_queue"
    network_mode: none

  elasticsearch:
    restart: always
    container_name: elasticsearch
    image: ${DOCKER_REGISTRY}elasticsearch
    volumes:
      - "${CONTAINERS_SHARED_DIR}/elasticsearch/data:/usr/share/elasticsearch/data"

  logstash:
    restart: always
    hostname: logstash
    container_name: logstash
    image: ${DOCKER_REGISTRY}logstash
    volumes:
      - "${CONTAINERS_SHARED_DIR}/logstash/data/dead_letter_queue:/usr/share/logstash/data/dead_letter_queue"
    ports:
      - "5044:5044"
      - "12201:12201/udp"

  # this is to restart logstash, as it has a tendency to loop around broken records
  # dead letter queue here is not helping
  # so we restart every 12 hours to clear broken records in logstash queue
  # https://github.com/logstash-plugins/logstash-output-elasticsearch/pull/730
  logstash-restarter:
    container_name: logstash-restarter
    image: docker:19.03.5
    entrypoint: ""
    command:
      - /bin/sh
      - -c
      - |
        sleep 20
        docker restart logstash
    labels:
      cron.schedule: "@every 12h"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  kibana:
    restart: always
    container_name: kibana
    image: ${DOCKER_REGISTRY}kibana
    environment:
      VIRTUAL_HOST: "kibana${ENV_DOMAIN}"
      VIRTUAL_PORT: 5601
      VHOST_HTPASSWD: "${KIBANA_HTPASSWD}"
      LETSENCRYPT_HOST: "kibana${ENV_DOMAIN}"
      LETSENCRYPT_EMAIL: devops@example.com

  elastalert:
    restart: unless-stopped
    container_name: elastalert
    image: ${DOCKER_REGISTRY}elastalert
    environment:
      EMAIL_USER: "${EMAIL_USER}"
      EMAIL_PASSWORD: "${EMAIL_PASSWORD}"

  curator:
    container_name: curator
    image: ${DOCKER_REGISTRY}curator
    labels:
      cron.schedule: "@every 23h10m10s"

  crontab-manager:
    restart: always
    image: rancher/container-crontab:v0.5.0
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  nginx-proxy:
    restart: always
    container_name: nginx-proxy
    image: hasnat/nginx-proxy
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true"
    ports:
      - "${NGINX_PROXY_HTTP_HOST_PORT:-80}:80"
      - "${NGINX_PROXY_HTTPS_HOST_PORT:-443}:443"
    volumes:
      - "${CONTAINERS_SHARED_DIR}/nginx/htpasswd:/etc/nginx/htpasswd:ro"
      - "${CONTAINERS_SHARED_DIR}/nginx/vhost.d:/etc/nginx/vhost.d"
      - "${CONTAINERS_SHARED_DIR}/nginx/html:/usr/share/nginx/html"
      - "${CONTAINERS_SHARED_DIR}/nginx/certs:/etc/nginx/certs"
      - "/var/run/docker.sock:/tmp/docker.sock:ro"

  letsencrypt-nginx-proxy-companion:
    restart: always
    container_name: letsencrypt-nginx-proxy-companion
    image: jrcs/letsencrypt-nginx-proxy-companion
    volumes:
      - "${CONTAINERS_SHARED_DIR}/nginx/vhost.d:/etc/nginx/vhost.d"
      - "${CONTAINERS_SHARED_DIR}/nginx/html:/usr/share/nginx/html"
      - "${CONTAINERS_SHARED_DIR}/nginx/certs:/etc/nginx/certs"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"